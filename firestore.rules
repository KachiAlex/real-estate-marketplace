rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Properties are readable and writable by all authenticated users
    match /properties/{propertyId} {
      allow read, write: if request.auth != null;
    }
    
    // Vendors: each authenticated user can read/write their own vendor profile
    match /vendors/{vendorId} {
      allow read, write: if request.auth != null && request.auth.uid == vendorId;
      
      // Vendor documents subcollection
      match /documents/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == vendorId;
      }
    }
    
    // Escrow transactions are readable by involved parties and admins
    match /escrow/{escrowId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.buyerId || 
         request.auth.uid == resource.data.sellerId || 
         request.auth.token.role == 'admin');
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.buyerId || 
         request.auth.uid == resource.data.sellerId || 
         request.auth.token.role == 'admin');
    }
    
    // Investments are readable by all authenticated users
    match /investments/{investmentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.sponsorId || 
         request.auth.token.role == 'admin');
    }
    
    // Messages are readable by participants
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
    }
    
    // Notifications are readable by the recipient
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'admin';
    }

    // Caregivers: allow caregiver to access own profile; admins too
    match /caregivers/{caregiverId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == caregiverId || request.auth.token.role == 'admin'
      );
    }

    // Patients: allow read for assigned doctor/caregiver or admin
    match /patients/{patientId} {
      allow read: if request.auth != null && (
        resource.data.doctorId == request.auth.uid ||
        resource.data.caregiverId == request.auth.uid ||
        request.auth.token.role == 'admin'
      );
      allow write: if request.auth != null && (
        resource.data.doctorId == request.auth.uid ||
        request.auth.token.role == 'admin'
      );
    }

    // Inspection Requests: secure access for involved buyer/vendor
    match /inspectionRequests/{requestId} {
      function isInvolved() {
        return request.auth != null && (
          request.auth.uid == resource.data.buyerId ||
          request.auth.uid == resource.data.vendorId ||
          request.auth.token.role == 'admin'
        );
      }

      function isBuyer() { return request.auth != null && request.auth.uid == resource.data.buyerId; }
      function isVendor() { return request.auth != null && request.auth.uid == resource.data.vendorId; }

      allow create: if request.auth != null; // creation by buyer via backend/client; validate in app layer
      allow read: if isInvolved();

      // Buyer can accept/decline vendor proposals
      allow update: if isBuyer() || isVendor() || (request.auth != null && request.auth.token.role == 'admin');
      allow delete: if false;
    }
  }
}
